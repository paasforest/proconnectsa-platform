# Generated by Django 5.2.6 on 2025-09-07 08:49

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_type', models.CharField(choices=[('client', 'Client'), ('provider', 'Service Provider'), ('admin', 'Administrator')], default='client', max_length=20)),
                ('is_phone_verified', models.BooleanField(default=False)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('phone', models.CharField(help_text='South African phone number in format +27XXXXXXXXX', max_length=13, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be in format: '+27812345678'", regex='^\\+27\\d{9}$')])),
                ('city', models.CharField(blank=True, max_length=100)),
                ('suburb', models.CharField(blank=True, max_length=100)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('last_active', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ProviderProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_name', models.CharField(max_length=200)),
                ('business_registration', models.CharField(blank=True, max_length=50)),
                ('license_number', models.CharField(blank=True, max_length=100)),
                ('vat_number', models.CharField(blank=True, max_length=20)),
                ('business_phone', models.CharField(blank=True, max_length=13)),
                ('business_email', models.EmailField(blank=True, max_length=254)),
                ('business_address', models.TextField()),
                ('service_areas', models.JSONField(default=list, help_text="List of service areas: ['Cape Town CBD', 'Bellville']")),
                ('max_travel_distance', models.IntegerField(default=30, help_text='Maximum travel distance in kilometers')),
                ('hourly_rate_min', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('hourly_rate_max', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('minimum_job_value', models.DecimalField(decimal_places=2, default=Decimal('500.00'), max_digits=8)),
                ('subscription_tier', models.CharField(choices=[('basic', 'Basic - R500/month'), ('premium', 'Premium - R1000/month'), ('enterprise', 'Enterprise - R2000/month')], default='basic', max_length=20)),
                ('subscription_start_date', models.DateTimeField(blank=True, null=True)),
                ('subscription_end_date', models.DateTimeField(blank=True, null=True)),
                ('credit_balance', models.IntegerField(default=0)),
                ('monthly_lead_limit', models.IntegerField(default=5)),
                ('leads_used_this_month', models.IntegerField(default=0)),
                ('verification_status', models.CharField(choices=[('pending', 'Pending Verification'), ('verified', 'Verified'), ('rejected', 'Rejected'), ('suspended', 'Suspended')], default='pending', max_length=20)),
                ('verification_documents', models.JSONField(default=dict, help_text='Store document URLs and metadata')),
                ('insurance_valid_until', models.DateField(blank=True, null=True)),
                ('average_rating', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=3)),
                ('total_reviews', models.IntegerField(default=0)),
                ('response_time_hours', models.FloatField(default=24.0, help_text='Average response time in hours')),
                ('job_completion_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5)),
                ('bio', models.TextField(blank=True)),
                ('years_experience', models.IntegerField(blank=True, null=True)),
                ('profile_image', models.URLField(blank=True)),
                ('portfolio_images', models.JSONField(default=list, help_text='List of portfolio image URLs')),
                ('receives_lead_notifications', models.BooleanField(default=True)),
                ('notification_methods', models.JSONField(default=list, help_text="Preferred notification methods: ['sms', 'email', 'push']")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='provider_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['user_type', 'created_at'], name='users_user_user_ty_b3830c_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['phone'], name='users_user_phone_9474e8_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['city', 'suburb'], name='users_user_city_0765fe_idx'),
        ),
        migrations.AddIndex(
            model_name='providerprofile',
            index=models.Index(fields=['verification_status', 'subscription_tier'], name='users_provi_verific_12c60d_idx'),
        ),
        migrations.AddIndex(
            model_name='providerprofile',
            index=models.Index(fields=['average_rating', 'total_reviews'], name='users_provi_average_26bca4_idx'),
        ),
        migrations.AddIndex(
            model_name='providerprofile',
            index=models.Index(fields=['subscription_end_date'], name='users_provi_subscri_d12045_idx'),
        ),
    ]
